para inicializar git  se usa el comando git init
git add "file name"

git config (muestra la opciones de configuracion)
git config --global user.email "andres.cruzch2@gmail.com para ingresar correo

git add . (siempre se debe dar add y el . es para decir que es de la carpeta actual
y se va a un staying - memoria ram y el archivo queda tracked)
git commit -m "mensaje del ajuste" (para que quede en el repositorio)
para eveitar hacer los 2 pasos esta -  git commit -am "mensaje del ajuste"

git log "archivo"   muestra los comit git log -- stat (mas detallado)

git show "file" mustra cambios realizados y el head donde esta
 esc + shit zz para salir del comando de error de omitir un mensaje de commit
git dif #comit reciente #comit antiguo (mistra las diferencias entre las versiones)
 
git resert #commit --hard   o   --soft  o --head  (para volver a una version anterior)
git rm --cached
git rm --force

git checkout #commit "file" para ver la version de ese numeral" y master para volver a la mas reciente
(desde la linea 13 estaba trabajando, midificando para crar conflictos)
no se estan uniendo los branch
despues de solucionar problemas y elegir la mejor opcion se debe hace un commit,
para que desaparesca el master|merging

antes de hacer un checkout o merge es importante tener claroq eu ya esta hecho el commit
es mejor hacer cambios significativos antes de hacer un commit para no estar moviendose entre ramas
pero si necesita tener control visual de las ramas re puede usar la parte izq baja de VC

para enlace con gitHub
git remote add origin https://github.com/Andresdc11/Proyecto1.git
git remote -v (verificar la conexión)
git remote set-url origin "url"

ANTES DE HACER UN PUSH  es importante hacer un pull si no lo permite:
hacer un git pull origin master --allow-unrelated-histories
git push origin master (es el paso a seguir)

ssh-keygen -t rsa-b 4096 -C "correodeseado"  para --cap 21 y 22 si quiero cambiar a conexión ssh 
para verificar que esta corriendo eval $(ssh-agent -S)

git log --all --graph --decorate --oneline refleja el arbole de commit
alias "cualquiernombre" = "git log --all --graph --decorate --oneline"
para hcer mas rapido la visualizacion ene l futuro 
git tag -d (nombre a borrar de ls tags)
git push origin :refs/tags/(nombre a borrar)

git tag -a v0.1 -m "primera version de todo" 736a663 para nombrar las versiones
git show-ref --tags ver a que commit esta vinculado el tag
git push origin --tags









